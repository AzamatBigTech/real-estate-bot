import logging
import os
import sys
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, CallbackContext
)
from config import TELEGRAM_TOKEN, DEEPSEEK_API_KEY
from db_handler import Database
from cachetools import cached, TTLCache
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TELEGRAM_TOKEN or not DEEPSEEK_API_KEY:
    logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ DEEPSEEK_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ (100 –∑–∞–ø—Ä–æ—Å–æ–≤, —Ö—Ä–∞–Ω–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
cache = TTLCache(maxsize=100, ttl=300)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞", callback_data="analyze")],
        [InlineKeyboardButton("–°—Ä–∞–≤–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã", callback_data="compare")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == "analyze":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –õ–æ–∫–∞—Ü–∏—è|–ü–ª–æ—â–∞–¥—å|–¶–µ–Ω–∞|–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞")
        context.user_data["awaiting_analysis"] = True
    elif query.data == "compare":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ **2 –∏–ª–∏ –±–æ–ª–µ–µ –æ–±—ä–µ–∫—Ç–æ–≤** –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–õ–æ–∫–∞—Ü–∏—è|–ü–ª–æ—â–∞–¥—å|–¶–µ–Ω–∞|–¢–∏–ø\n–õ–æ–∫–∞—Ü–∏—è|–ü–ª–æ—â–∞–¥—å|–¶–µ–Ω–∞|–¢–∏–ø")
        context.user_data["awaiting_comparison"] = True

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
async def handle_message(update: Update, context: CallbackContext):
    try:
        text = update.message.text
        lines = text.split("\n")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        if "awaiting_analysis" in context.user_data:
            del context.user_data["awaiting_analysis"]

            if len(lines) != 1:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ **–æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç** –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –õ–æ–∫–∞—Ü–∏—è|–ü–ª–æ—â–∞–¥—å|–¶–µ–Ω–∞|–¢–∏–ø")
                return

            data = lines[0].split("|")
            if len(data) != 4:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –õ–æ–∫–∞—Ü–∏—è|–ü–ª–æ—â–∞–¥—å|–¶–µ–Ω–∞|–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞")
                return

            analysis_result = await deepseek_analysis(data)
            investment_grade = calculate_investment_grade(analysis_result)

            db.save_analysis(update.message.from_user.id, data, analysis_result)
            pdf_buffer = await generate_pdf_report([analysis_result], [investment_grade])

            response = f"üìä **–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç**:\n{analysis_result}\nüí∞ **–û—Ü–µ–Ω–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏**: {investment_grade}/100"
            await update.message.reply_text(response)
            await update.message.reply_document(document=pdf_buffer, filename="report.pdf")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        if "awaiting_comparison" in context.user_data:
            del context.user_data["awaiting_comparison"]

            if len(lines) < 2:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ **–º–∏–Ω–∏–º—É–º 2 –æ–±—ä–µ–∫—Ç–∞** –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–õ–æ–∫–∞—Ü–∏—è|–ü–ª–æ—â–∞–¥—å|–¶–µ–Ω–∞|–¢–∏–ø")
                return

            analyses = []
            grades = []
            for line in lines:
                data = line.split("|")
                if len(data) != 4:
                    await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ: `{line}`. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç: –õ–æ–∫–∞—Ü–∏—è|–ü–ª–æ—â–∞–¥—å|–¶–µ–Ω–∞|–¢–∏–ø")
                    return

                analysis = await deepseek_analysis(data)
                grade = calculate_investment_grade(analysis)
                analyses.append(analysis)
                grades.append(grade)

            pdf_buffer = await generate_pdf_report(analyses, grades)

            comparison_result = "\n\n".join([f"üè° **–û–±—ä–µ–∫—Ç {i+1}**:\n{analyses[i]}\nüí∞ –û—Ü–µ–Ω–∫–∞: {grades[i]}/100" for i in range(len(analyses))])
            await update.message.reply_text(f"üìä **–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤**:\n{comparison_result}")
            await update.message.reply_document(document=pdf_buffer, filename="comparison_report.pdf")
            return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# ‚úÖ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ API DeepSeek (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
@cached(cache)
async def deepseek_analysis(data: list) -> str:
    prompt = f"""
    –ü—Ä–æ–≤–µ–¥–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:
    üìç –õ–æ–∫–∞—Ü–∏—è: {data[0]}
    üìè –ü–ª–æ—â–∞–¥—å: {data[1]} –º¬≤
    üí∞ –¶–µ–Ω–∞: {data[2]} —Ä—É–±
    üè¢ –¢–∏–ø: {data[3]}

    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π:
    1Ô∏è‚É£ –†—ã–Ω–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    2Ô∏è‚É£ –ê—Ä–µ–Ω–¥–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
    3Ô∏è‚É£ –¢—Ä–µ–Ω–¥—ã —Ä–∞–π–æ–Ω–∞
    4Ô∏è‚É£ –†–∏—Å–∫–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    """

    response = requests.post(
        "https://api.deepseek.com/generate",
        headers={"Authorization": f"Bearer {DEEPSEEK_API_KEY}"},
        json={"prompt": prompt, "max_tokens": 1500}
    )

    if response.status_code == 200:
        return response.json().get("text", "–û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ")
    else:
        logger.error(f"DeepSeek API Error: {response.status_code} - {response.text}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek API"

# ‚úÖ –û—Ü–µ–Ω–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
def calculate_investment_grade(analysis: str) -> int:
    grade = len(analysis) // 10  # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –¥–ª–∏–Ω–µ –∞–Ω–∞–ª–∏–∑–∞
    if "—Ä–∏—Å–∫" in analysis.lower():
        grade -= 20
    if "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª" in analysis.lower():
        grade += 20
    return min(100, max(0, grade))

# ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á–µ—Ç–∞
async def generate_pdf_report(analyses: list, grades: list) -> BytesIO:
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    c.drawString(72, 750, "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")

    y_position = 730
    for i in range(len(analyses)):
        c.drawString(72, y_position, f"üè° –û–±—ä–µ–∫—Ç {i+1}")
        c.drawString(72, y_position - 20, analyses[i][:400])
        c.drawString(72, y_position - 40, f"üí∞ –û—Ü–µ–Ω–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {grades[i]}/100")
        y_position -= 80

    c.save()
    buffer.seek(0)
    return buffer

# ‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_click))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()