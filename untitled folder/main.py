import logging
import os
import sys
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from config import TELEGRAM_TOKEN, DEEPSEEK_API_KEY
from db_handler import Database
from cachetools import cached, TTLCache
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
cache = TTLCache(maxsize=100, ttl=300)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TELEGRAM_TOKEN or not DEEPSEEK_API_KEY:
    logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ DEEPSEEK_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞", callback_data="analyze")],
        [InlineKeyboardButton("–°—Ä–∞–≤–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã", callback_data="compare")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_message(update: Update, context: CallbackContext):
    try:
        data = update.message.text.split("|")
        
        if len(data) != 4:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –õ–æ–∫–∞—Ü–∏—è|–ü–ª–æ—â–∞–¥—å|–¶–µ–Ω–∞|–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞")
            return

        # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ API
        analysis_result = await deepseek_analysis(tuple(data))  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ—Ä—Ç–µ–∂
        investment_grade = calculate_investment_grade(analysis_result)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.save_analysis(update.message.from_user.id, "|".join(data), analysis_result)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤ —Å—Ç—Ä–æ–∫—É

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á–µ—Ç–∞
        pdf_buffer = await generate_pdf_report(analysis_result, investment_grade)

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = f"""
üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç:
{analysis_result}

üí∞ –û—Ü–µ–Ω–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {investment_grade}/100
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {"–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å" if investment_grade >= 70 else "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã"}
        """
        await update.message.reply_text(response)
        await update.message.reply_document(document=pdf_buffer, filename="report.pdf")
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á–µ—Ç–∞
async def generate_pdf_report(analysis_result: str, investment_grade: int) -> BytesIO:
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    c.drawString(72, 750, "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
    c.drawString(72, 730, str(analysis_result))  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É
    c.drawString(72, 710, f"–û—Ü–µ–Ω–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {investment_grade}/100")
    c.save()
    buffer.seek(0)
    return buffer

# –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ DeepSeek API (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤)
@cached(cache)
async def deepseek_analysis(data: tuple) -> str:
    prompt = f"""
    –ü—Ä–æ–≤–µ–¥–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
    –õ–æ–∫–∞—Ü–∏—è: {data[0]}
    –ü–ª–æ—â–∞–¥—å: {data[1]} –º¬≤
    –¶–µ–Ω–∞: {data[2]} —Ä—É–±
    –¢–∏–ø: {data[3]}

    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π:
    1. –†—ã–Ω–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    2. –ê—Ä–µ–Ω–¥–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
    3. –¢—Ä–µ–Ω–¥—ã —Ä–∞–π–æ–Ω–∞
    4. –†–∏—Å–∫–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    """

    response = requests.post(
        "https://api.deepseek.com/generate",
        headers={"Authorization": f"Bearer {DEEPSEEK_API_KEY}"},
        json={"prompt": prompt, "max_tokens": 1500}
    )

    if response.status_code == 200:
        return response.json().get("text", "–û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ")
    else:
        logger.error(f"DeepSeek API Error: {response.status_code} - {response.text}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek API"

# –û—Ü–µ–Ω–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
def calculate_investment_grade(analysis: str) -> int:
    grade = len(analysis) // 10
    if "—Ä–∏—Å–∫" in analysis.lower():
        grade -= 20
    if "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª" in analysis.lower():
        grade += 20
    return min(100, max(0, grade))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–æ–≤ –Ω–∞ Render
    PORT = int(os.environ.get("PORT", 5000))
    WEBHOOK_URL = os.environ.get("WEBHOOK_URL")

    if WEBHOOK_URL:
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –≤–µ–±—Ö—É–∫–∞–º–∏ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TELEGRAM_TOKEN,
            webhook_url=f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}"
        )
    else:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        application.run_polling()