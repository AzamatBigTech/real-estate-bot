import logging
import os
import sys
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, CallbackContext
from config import TELEGRAM_TOKEN, DEEPSEEK_API_KEY
from db_handler import Database
from cachetools import cached, TTLCache
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TELEGRAM_TOKEN or not DEEPSEEK_API_KEY:
    logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ DEEPSEEK_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ö—ç—à –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
cache = TTLCache(maxsize=100, ttl=300)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞", callback_data="analyze")],
        [InlineKeyboardButton("–°—Ä–∞–≤–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã", callback_data="compare")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
async def button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == "analyze":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nüìç –õ–æ–∫–∞—Ü–∏—è|üìè –ü–ª–æ—â–∞–¥—å|üí∞ –¶–µ–Ω–∞|üè¢ –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞\n\n–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞|50|10000000|–ö–≤–∞—Ä—Ç–∏—Ä–∞")

    elif query.data == "compare":
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n–ü—Ä–∏–º–µ—Ä:\n–ú–æ—Å–∫–≤–∞|50|10000000|–ö–≤–∞—Ä—Ç–∏—Ä–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥|60|12000000|–ö–≤–∞—Ä—Ç–∏—Ä–∞")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
async def handle_message(update: Update, context: CallbackContext):
    try:
        data = update.message.text.split("|")
        if len(data) != 4:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –õ–æ–∫–∞—Ü–∏—è|–ü–ª–æ—â–∞–¥—å|–¶–µ–Ω–∞|–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞")
            return

        analysis_result = await deepseek_analysis(data)
        investment_grade = calculate_investment_grade(analysis_result)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.save_analysis(update.message.from_user.id, data, analysis_result)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á–µ—Ç–∞
        pdf_buffer = await generate_pdf_report(analysis_result, investment_grade)

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = f"""
üìä *–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç:*
{analysis_result}

üí∞ *–û—Ü–µ–Ω–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:* {investment_grade}/100
üîπ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {"‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å" if investment_grade >= 70 else "‚ö†Ô∏è –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã"}
        """
        await update.message.reply_text(response, parse_mode="Markdown")
        await update.message.reply_document(document=pdf_buffer, filename="report.pdf")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á–µ—Ç–∞
async def generate_pdf_report(analysis_result: str, investment_grade: int) -> BytesIO:
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    c.drawString(72, 750, "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
    c.drawString(72, 730, analysis_result[:300])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    c.drawString(72, 710, f"–û—Ü–µ–Ω–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {investment_grade}/100")
    c.save()
    buffer.seek(0)
    return buffer

# –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ DeepSeek API
@cached(cache)
async def deepseek_analysis(data: list) -> str:
    prompt = f"""
    –ü—Ä–æ–≤–µ–¥–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:
    üìç –õ–æ–∫–∞—Ü–∏—è: {data[0]}
    üìè –ü–ª–æ—â–∞–¥—å: {data[1]} –º¬≤
    üí∞ –¶–µ–Ω–∞: {data[2]} —Ä—É–±
    üè¢ –¢–∏–ø: {data[3]}

    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π:
    1Ô∏è‚É£ –†—ã–Ω–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    2Ô∏è‚É£ –ê—Ä–µ–Ω–¥–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
    3Ô∏è‚É£ –¢—Ä–µ–Ω–¥—ã —Ä–∞–π–æ–Ω–∞
    4Ô∏è‚É£ –†–∏—Å–∫–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    """

    try:
        response = requests.post(
            "https://api.deepseek.com/generate",
            headers={"Authorization": f"Bearer {DEEPSEEK_API_KEY}"},
            json={"prompt": prompt, "max_tokens": 1500}
        )

        if response.status_code != 200:
            logger.error(f"DeepSeek API Error: {response.status_code} - {response.text}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        response_json = response.json()
        if "text" not in response_json:
            logger.error(f"DeepSeek API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_json}")
            return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

        return response_json["text"]

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DeepSeek API: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DeepSeek API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ."

    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –û—Ü–µ–Ω–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
def calculate_investment_grade(analysis: str) -> int:
    grade = len(analysis) // 10
    if "—Ä–∏—Å–∫" in analysis.lower():
        grade -= 20
    if "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª" in analysis.lower():
        grade += 20
    return min(100, max(0, grade))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_click))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–æ–≤ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω URL)
    PORT = int(os.environ.get("PORT", 5000))
    WEBHOOK_URL = os.environ.get("WEBHOOK_URL")

    if WEBHOOK_URL:
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –≤–µ–±—Ö—É–∫–∞–º–∏ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TELEGRAM_TOKEN,
            webhook_url=f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}"
        )
    else:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        application.run_polling()