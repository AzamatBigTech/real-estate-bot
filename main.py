  import logging
  import os
  import sys
  import openai
  from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
  from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
  from config import TELEGRAM_TOKEN, OPENAI_API_KEY
  from db_handler import Database
  from cachetools import cached, TTLCache
  from io import BytesIO
  from reportlab.lib.pagesizes import letter
  from reportlab.pdfgen import canvas
  from reportlab.lib.utils import simpleSplit
  
  # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
  cache = TTLCache(maxsize=100, ttl=300)
  
  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
  logger = logging.getLogger(__name__)
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
      logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
      sys.exit(1)
  
  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  db = Database()
  
  # –ö–æ–º–∞–Ω–¥–∞ /start
  async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
      keyboard = [[InlineKeyboardButton("–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞", callback_data="analyze")],
                  [InlineKeyboardButton("–°—Ä–∞–≤–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã", callback_data="compare")]]
      reply_markup = InlineKeyboardMarkup(keyboard)
      await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
  
  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
  async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
      query = update.callback_query
      await query.answer()
  
      if query.data == "analyze":
          await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –õ–æ–∫–∞—Ü–∏—è|–ü–ª–æ—â–∞–¥—å|–¶–µ–Ω–∞|–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞")
      elif query.data == "compare":
          await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–õ–æ–∫–∞—Ü–∏—è1|–ü–ª–æ—â–∞–¥—å1|–¶–µ–Ω–∞1|–¢–∏–ø1\n–õ–æ–∫–∞—Ü–∏—è2|–ü–ª–æ—â–∞–¥—å2|–¶–µ–Ω–∞2|–¢–∏–ø2")
  
  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
      try:
          data = update.message.text.split("|")
          if len(data) != 4:
              await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –õ–æ–∫–∞—Ü–∏—è|–ü–ª–æ—â–∞–¥—å|–¶–µ–Ω–∞|–¢–∏–ø")
              return
  
          analysis_result = await openai_analysis(tuple(data))
          investment_grade = calculate_investment_grade(analysis_result)
          db.save_analysis(update.message.from_user.id, data, analysis_result)
          pdf_buffer = await generate_pdf_report(analysis_result, investment_grade)
  
          response = f"""
  üìä **–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç**:
  {analysis_result}
  
  üí∞ **–û—Ü–µ–Ω–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏**: {investment_grade}/100
  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {"‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å" if investment_grade >= 70 else "‚ùå –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã"}
          """
          await update.message.reply_text(response, parse_mode="Markdown")
          await update.message.reply_document(document=pdf_buffer, filename="report.pdf")
      except Exception as e:
          logger.error(f"–û—à–∏–±–∫–∞: {e}")
          await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
  
  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á–µ—Ç–∞
  async def generate_pdf_report(analysis_result: str, investment_grade: int) -> BytesIO:
      buffer = BytesIO()
      c = canvas.Canvas(buffer, pagesize=letter)
      text = c.beginText(72, 750)
      text.setFont("Helvetica", 12)
      lines = simpleSplit(analysis_result, "Helvetica", 12, 450)
      for line in lines:
          text.textLine(line)
      text.textLine(f"–û—Ü–µ–Ω–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {investment_grade}/100")
      c.drawText(text)
      c.save()
      buffer.seek(0)
      return buffer
  
  # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI API
  @cached(cache)
  async def openai_analysis(data: tuple) -> str:
      prompt = f"""
      –ü—Ä–æ–≤–µ–¥–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:
      –õ–æ–∫–∞—Ü–∏—è: {data[0]}
      –ü–ª–æ—â–∞–¥—å: {data[1]} –º¬≤
      –¶–µ–Ω–∞: {data[2]} —Ä—É–±
      –¢–∏–ø: {data[3]}
  
      1. –†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
      2. –ê—Ä–µ–Ω–¥–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
      3. –¢—Ä–µ–Ω–¥—ã —Ä–∞–π–æ–Ω–∞
      4. –†–∏—Å–∫–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
      """
      try:
          response = openai.ChatCompletion.create(
              model="gpt-3.5-turbo",
              messages=[{"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –≤ –∞–Ω–∞–ª–∏–∑–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏."},
                        {"role": "user", "content": prompt}],
              max_tokens=1500
          )
          return response["choices"][0]["message"]["content"].strip()
      except Exception as e:
          logger.error(f"OpenAI API Error: {e}")
          return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API"
  
  # –û—Ü–µ–Ω–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  def calculate_investment_grade(analysis: str) -> int:
      grade = min(100, max(0, len(analysis) // 10))
      if "—Ä–∏—Å–∫" in analysis.lower():
          grade -= 20
      if "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª" in analysis.lower():
          grade += 20
      return grade
  
  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
  if __name__ == "__main__":
      application = Application.builder().token(TELEGRAM_TOKEN).build()
      application.add_handler(CommandHandler("start", start))
      application.add_handler(CallbackQueryHandler(button_handler))
      application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
      
      PORT = int(os.environ.get("PORT", 5000))
      WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
  
      if WEBHOOK_URL:
          logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –≤–µ–±—Ö—É–∫–∞–º–∏ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
          application.run_webhook(
              listen="0.0.0.0", port=PORT, url_path=TELEGRAM_TOKEN,
              webhook_url=f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}"
          )
      else:
          logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
          application.run_polling()
